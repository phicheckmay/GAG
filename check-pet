-- üëã G·ª≠i JSON d·ªØ li·ªáu pet l√™n Discord webhook (t∆∞∆°ng th√≠ch h·∫ßu h·∫øt executor)
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- ‚ö†Ô∏è ƒë·ªïi webhook c·ªßa b·∫°n t·∫°i ƒë√¢y
local WEBHOOK = "https://discord.com/api/webhooks/1424180140900089908/XvigDpzMnf85urM06MiUy0XCRjlhwWcP55AYNYvkTMNAUkaY6CyE0qNRylBNMivlpxxe"

-- üëá gom to√†n b·ªô pet trong t√∫i + nh√¢n v·∫≠t
local function gather()
    local pets = {}
    local function addFrom(folder)
        if not folder or not folder.GetChildren then return end
        for _, v in ipairs(folder:GetChildren()) do
            if v:IsA("Tool") or v:IsA("Model") or v:IsA("Accessory") or v:IsA("Folder") then
                table.insert(pets, tostring(v.Name))
            end
        end
    end
    addFrom(LP:WaitForChild("Backpack"))
    addFrom(LP.Character)

    return {
        username = LP.Name,
        pets = pets
    }
end

-- üëá g·ª≠i JSON l√™n webhook
local function sendWebhook(data)
    local json = HttpService:JSONEncode(data)
    local body = HttpService:JSONEncode({ content = json })

    -- x√°c ƒë·ªãnh h√†m g·ª≠i HTTP ph√π h·ª£p v·ªõi executor
    local req = (syn and syn.request) or http_request or request or (fluxus and fluxus.request)

    if typeof(req) == "function" then
        -- executor c√≥ h·ªó tr·ª£ http_request (Delta, Ronix, Fluxus, KRNL, Synapse,...)
        req({
            Url = WEBHOOK,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = body
        })
    else
        -- fallback nh·∫π: th·ª≠ PostAsync (ƒë√¥i khi ƒë∆∞·ª£c tr√™n executor c≈©)
        pcall(function()
            game:GetService("HttpService"):PostAsync(WEBHOOK, body, Enum.HttpContentType.ApplicationJson)
        end)
    end
end

-- üü¢ g·ª≠i ngay khi script ch·∫°y
sendWebhook(gather())

-- üîÅ g·ª≠i ƒë·ªãnh k·ª≥ (m·ªói 5 ph√∫t)
task.spawn(function()
    while task.wait(300) do
        sendWebhook(gather())
    end
end)
